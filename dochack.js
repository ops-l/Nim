/* Generated by the Nim Compiler v1.1.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI44032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI197058 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47262 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI199570 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI85448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI85205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI85283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI85281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI85227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI85565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI85563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI85561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI85231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI85229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI87305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI47250 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47258 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI64156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47314 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI44016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI44040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI44042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI47308 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI47226 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47228 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47242 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47246 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI47246 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47246.node = NNI47246;
var NNI47242 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47242.node = NNI47242;
var NNI47228 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47228.node = NNI47228;
NTI47308.base = NTI47226;
NTI47314.base = NTI47226;
var NNI47226 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI47308, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI44042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI44040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI44040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI44016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI47314, name: "up", sons: null}]};
NTI47226.node = NNI47226;
var NNI47208 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47208.node = NNI47208;
NTI47226.base = NTI47208;
NTI47228.base = NTI47226;
NTI47242.base = NTI47228;
NTI47246.base = NTI47242;
var NNI64156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44006, name: "Field1", sons: null}]};
NTI64156.node = NNI64156;
var NNI47258 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47258.node = NNI47258;
NTI47258.base = NTI47228;
var NNI47250 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47250.node = NNI47250;
NTI47250.base = NTI47228;
NTI85561.base = NTI85229;
NTI85563.base = NTI85229;
NTI85565.base = NTI85229;
var NNI85227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI85227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI85227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI85227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI85227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI85227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI85227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI85227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI85227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI85227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI85227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI85227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI85227, name: "NotationNode", len: 0, sons: null}}};
NTI85227.node = NNI85227;
var NNI85283 = {kind: 2, len: 92, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI44042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI44042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI44042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI44042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI44042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI44042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI44042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI44042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI44042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI44042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI44042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI44042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI44042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI44042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI44042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI44042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI44042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI44042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI44042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI44042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI44042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI44042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI44042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI44042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI44042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI44042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI44042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI44042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI44042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI44042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI44042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI44042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI44042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI44042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI44042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI44042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI44042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI44042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI44042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI44042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI44042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI44042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI44042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI44042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI44042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI44042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI44042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI44042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI44042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI44042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI44042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI44042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI44042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI44042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI44042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI44042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI44042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI44042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI44042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI44042, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI44042, name: "opacity", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI44042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI44042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI44042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI44042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI44042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI44042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI44042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI44042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI44042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI44042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI44042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI44042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI44042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI44042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI44042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI44042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI44042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI44042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI44042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI44042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI44042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI44042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI44042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI44042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI44042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI44042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI44042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI44042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI44042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI44042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI44006, name: "zIndex", sons: null}]};
NTI85283.node = NNI85283;
NTI85283.base = NTI47208;
NTI85281.base = NTI85283;
var NNI85231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI85561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI85563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI85565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI44042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI85229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI85229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI85229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI44042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI85227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI44042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI85229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI85229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI44042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI85281, name: "style", sons: null}]};
NTI85231.node = NNI85231;
var NNI85205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI85372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI85376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI85380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI85384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI85388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI85392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI85396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI85400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI85404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI85408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI85412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI85416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI85420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI85424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI85428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI85432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI85436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI85440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI85444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI85448, name: "onunload", sons: null}]};
NTI85205.node = NNI85205;
NTI85205.base = NTI47208;
NTI85231.base = NTI85205;
NTI85229.base = NTI85231;
NTI87305.base = NTI85229;
NTI199570.base = NTI44042;
var NNI47262 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47262.node = NNI47262;
NTI47262.base = NTI47228;
var NNI197058 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44032, name: "Field1", sons: null}]};
NTI197058.node = NNI197058;

function makeNimstrLit(c_66270) {
      var ln = c_66270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_66270.charCodeAt(i);
  }
  return result;
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_67827, src_67828, ti_67829) {
  var result_68019 = null;

    switch (ti_67829.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_67801(ti_67829))) {
      result_68019 = src_67828;
      }
      else {
        result_68019 = [src_67828[0], src_67828[1]];
      }
      
      break;
    case 19:
            if (dest_67827 === null || dest_67827 === undefined) {
        dest_67827 = {};
      }
      else {
        for (var key in dest_67827) { delete dest_67827[key]; }
      }
      for (var key in src_67828) { dest_67827[key] = src_67828[key]; }
      result_68019 = dest_67827;
    
      break;
    case 18:
    case 17:
      if (!((ti_67829.base == null))) {
      result_68019 = nimCopy(dest_67827, src_67828, ti_67829.base);
      }
      else {
      if ((ti_67829.kind == 17)) {
      result_68019 = (dest_67827 === null || dest_67827 === undefined) ? {m_type: ti_67829} : dest_67827;
      }
      else {
        result_68019 = (dest_67827 === null || dest_67827 === undefined) ? {} : dest_67827;
      }
      }
      nimCopyAux(result_68019, src_67828, ti_67829.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_67828 === null) {
        result_68019 = null;
      }
      else {
        if (dest_67827 === null || dest_67827 === undefined) {
          dest_67827 = new Array(src_67828.length);
        }
        else {
          dest_67827.length = src_67828.length;
        }
        result_68019 = dest_67827;
        for (var i = 0; i < src_67828.length; ++i) {
          result_68019[i] = nimCopy(result_68019[i], src_67828[i], ti_67829.base);
        }
      }
    
      break;
    case 28:
            if (src_67828 !== null) {
        result_68019 = src_67828.slice(0);
      }
    
      break;
    default: 
      result_68019 = src_67828;
      break;
    }

  return result_68019;

}

function arrayConstr(len_68086, value_68087, typ_68088) {
        var result = new Array(len_68086);
    for (var i = 0; i < len_68086; ++i) result[i] = nimCopy(null, value_68087, typ_68088);
    return result;
  

  
}

function cstrToNimstr(c_66287) {
      var ln = c_66287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_66287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_66287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function toJSStr(s_66304) {
                    var Tmp5;
            var Tmp7;

  var result_66305 = null;

    var res_66378 = new_seq_66336((s_66304 != null ? s_66304.length : 0));
    var i_66380 = 0;
    var j_66382 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_66380 < (s_66304 != null ? s_66304.length : 0))) break L2;
          var c_66383 = s_66304[i_66380];
          if ((c_66383 < 128)) {
          res_66378[j_66382] = String.fromCharCode(c_66383);
          i_66380 += 1;
          }
          else {
            var helper_66406 = new_seq_66336(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_66407 = c_66383.toString(16);
                  if (((code_66407 != null ? code_66407.length : 0) == 1)) {
                  if (helper_66406 != null) { helper_66406.push("%0"); } else { helper_66406 = ["%0"]; };
                  }
                  else {
                  if (helper_66406 != null) { helper_66406.push("%"); } else { helper_66406 = ["%"]; };
                  }
                  
                  if (helper_66406 != null) { helper_66406.push(code_66407); } else { helper_66406 = [code_66407]; };
                  i_66380 += 1;
                    if (((s_66304 != null ? s_66304.length : 0) <= i_66380)) Tmp5 = true; else {                      Tmp5 = (s_66304[i_66380] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_66383 = s_66304[i_66380];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_66378[j_66382] = decodeURIComponent(helper_66406.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_66378[j_66382] = helper_66406.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_66382 += 1;
        }
    } while(false);
    if (res_66378 === null) res_66378 = [];
               if (res_66378.length < j_66382) { for (var i=res_66378.length;i<j_66382;++i) res_66378.push(null); }
               else { res_66378.length = j_66382; };
    result_66305 = res_66378.join("");

  return result_66305;

}

function raiseException(e_64618, ename_64619) {
    e_64618.name = ename_64619;
    if ((excHandler == 0)) {
    unhandledException(e_64618);
    }
    
    e_64618.trace = nimCopy(null, raw_write_stack_trace_64481(), NTI44040);
    throw e_64618;

  
}

function addInt(a_66803, b_66804) {
        var result = a_66803 + b_66804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}

function chckIndx(i_68105, a_68106, b_68107) {
      var Tmp1;

  var result_68108 = 0;

  BeforeRet: do {
      if (!(a_68106 <= i_68105)) Tmp1 = false; else {        Tmp1 = (i_68105 <= b_68107);      }    if (Tmp1) {
    result_68108 = i_68105;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_68105, a_68106, b_68107);
    }
    
  } while (false);

  return result_68108;

}

function subInt(a_66821, b_66822) {
        var result = a_66821 - b_66822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_68124, a_68125, b_68126) {
      var Tmp1;

  var result_68127 = 0;

  BeforeRet: do {
      if (!(a_68125 <= i_68124)) Tmp1 = false; else {        Tmp1 = (i_68124 <= b_68126);      }    if (Tmp1) {
    result_68127 = i_68124;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_68127;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_66839, b_66840) {
        var result = a_66839 * b_66840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_67221, b_67222) {
    var Tmp1;

  var result_67223 = 0;

  BeforeRet: do {
    if ((b_67222 <= a_67221)) {
    Tmp1 = a_67221;
    }
    else {
    Tmp1 = b_67222;
    }
    
    result_67223 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_67223;

}

function nimMin(a_67203, b_67204) {
    var Tmp1;

  var result_67205 = 0;

  BeforeRet: do {
    if ((a_67203 <= b_67204)) {
    Tmp1 = a_67203;
    }
    else {
    Tmp1 = b_67204;
    }
    
    result_67205 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_67205;

}
var nim_program_result = 0;
var global_raise_hook_61818 = [null];
var local_raise_hook_61823 = [null];
var out_of_mem_hook_61826 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var alternative_199319 = [null];

function is_fat_pointer_67801(ti_67803) {
  var result_67804 = false;

  BeforeRet: do {
    result_67804 = !((ConstSet1[ti_67803.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_67804;

}

function nimCopyAux(dest_67832, src_67833, n_67835) {
    switch (n_67835.kind) {
    case 0:
      break;
    case 1:
            dest_67832[n_67835.offset] = nimCopy(dest_67832[n_67835.offset], src_67833[n_67835.offset], n_67835.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_67835.sons.length; i++) {
      nimCopyAux(dest_67832, src_67833, n_67835.sons[i]);
    }
    
      break;
    case 3:
            dest_67832[n_67835.offset] = nimCopy(dest_67832[n_67835.offset], src_67833[n_67835.offset], n_67835.typ);
      for (var i = 0; i < n_67835.sons.length; ++i) {
        nimCopyAux(dest_67832, src_67833, n_67835.sons[i][1]);
      }
    
      break;
    }

  
}

function add_61838(x_61841, x_61841_Idx, y_61842) {
          if (x_61841[x_61841_Idx] === null) { x_61841[x_61841_Idx] = []; }
      var off = x_61841[x_61841_Idx].length;
      x_61841[x_61841_Idx].length += y_61842.length;
      for (var i = 0; i < y_61842.length; ++i) {
        x_61841[x_61841_Idx][off+i] = y_61842.charCodeAt(i);
      }
    

  
}

function aux_write_stack_trace_64151(f_64153) {
          var Tmp3;

  var result_64154 = [null];

    var it_64162 = f_64153;
    var i_64164 = 0;
    var total_64166 = 0;
    var temp_frames_64173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI64156);
    L1: do {
        L2: while (true) {
          if (!!((it_64162 == null))) Tmp3 = false; else {            Tmp3 = (i_64164 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_64173[i_64164].Field0 = it_64162.procname;
          temp_frames_64173[i_64164].Field1 = it_64162.line;
          i_64164 += 1;
          total_64166 += 1;
          it_64162 = it_64162.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_64162 == null))) break L5;
          total_64166 += 1;
          it_64162 = it_64162.prev;
        }
    } while(false);
    result_64154[0] = nimCopy(null, [], NTI44040);
    if (!((total_64166 == i_64164))) {
    if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(makeNimstrLit("(")); } else { result_64154[0] = makeNimstrLit("("); };
    if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(cstrToNimstr(((total_64166 - i_64164))+"")); } else { result_64154[0] = cstrToNimstr(((total_64166 - i_64164))+"").slice(); };
    if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_64154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_64421 = 0;
      var colontmp__199462 = 0;
      colontmp__199462 = (i_64164 - 1);
      var res_199467 = colontmp__199462;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_199467)) break L8;
            j_64421 = res_199467;
            add_61838(result_64154, 0, temp_frames_64173[j_64421].Field0);
            if ((0 < temp_frames_64173[j_64421].Field1)) {
            if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(makeNimstrLit(", line: ")); } else { result_64154[0] = makeNimstrLit(", line: "); };
            if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(cstrToNimstr((temp_frames_64173[j_64421].Field1)+"")); } else { result_64154[0] = cstrToNimstr((temp_frames_64173[j_64421].Field1)+"").slice(); };
            }
            
            if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(makeNimstrLit("\x0A")); } else { result_64154[0] = makeNimstrLit("\x0A"); };
            res_199467 -= 1;
          }
      } while(false);
    } while(false);

  return result_64154[0];

}

function raw_write_stack_trace_64481() {
  var result_64483 = null;

    if (!((framePtr == null))) {
    result_64483 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_64151(framePtr) || []), NTI44040);
    }
    else {
      result_64483 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI44040);
    }
    

  return result_64483;

}

function new_seq_66336(len_66339) {
  var result_66341 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 973;
    result_66341 = new Array(len_66339); for (var i=0;i<len_66339;++i) {result_66341[i]=null;}  framePtr = F.prev;

  return result_66341;

}

function unhandledException(e_64542) {
    var buf_64543 = [[]];
    if (!(((e_64542.message != null ? e_64542.message.length : 0) == 0))) {
    if (buf_64543[0] != null) { buf_64543[0] = (buf_64543[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_64543[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_64543[0] != null) { buf_64543[0] = (buf_64543[0]).concat(e_64542.message); } else { buf_64543[0] = e_64542.message.slice(); };
    }
    else {
    if (buf_64543[0] != null) { buf_64543[0] = (buf_64543[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_64543[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_64543[0] != null) { buf_64543[0] = (buf_64543[0]).concat(makeNimstrLit(" [")); } else { buf_64543[0] = makeNimstrLit(" ["); };
    add_61838(buf_64543, 0, e_64542.name);
    if (buf_64543[0] != null) { buf_64543[0] = (buf_64543[0]).concat(makeNimstrLit("]\x0A")); } else { buf_64543[0] = makeNimstrLit("]\x0A"); };
    if (buf_64543[0] != null) { buf_64543[0] = (buf_64543[0]).concat(raw_write_stack_trace_64481()); } else { buf_64543[0] = raw_write_stack_trace_64481().slice(); };
    var cbuf_64601 = toJSStr(buf_64543[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_64601);
  }
  else {
    throw cbuf_64601;
  }
  

  
}

function raiseOverflow() {
    var eHEX60gensym65058_65203 = null;
    eHEX60gensym65058_65203 = {m_type: NTI47246, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym65058_65203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI44040);
    eHEX60gensym65058_65203.parent = null;
    raiseException(eHEX60gensym65058_65203, "OverflowError");

  
}

function is_whitespace_198669(text_198671) {
         return !/[^\s]/.test(text_198671);
  

  
}

function is_whitespace_198686(x_198688) {
    var Tmp1;
    var Tmp2;

  var result_198689 = false;

  var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 134;
    if (!(x_198688.nodeName == "#text")) Tmp2 = false; else {      Tmp2 = is_whitespace_198669(x_198688.textContent);    }    if (Tmp2) Tmp1 = true; else {      Tmp1 = (x_198688.nodeName == "#comment");    }    result_198689 = Tmp1;
  framePtr = F.prev;

  return result_198689;

}

function raiseIndexError(i_65655, a_65656, b_65657) {
    var Tmp1;

    var eHEX60gensym65802_66003 = null;
    eHEX60gensym65802_66003 = {m_type: NTI47258, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    if ((b_65657 < a_65656)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_65655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_65656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_65657)+"") || []);
    }
    
    eHEX60gensym65802_66003.message = nimCopy(null, Tmp1, NTI44040);
    eHEX60gensym65802_66003.parent = null;
    raiseException(eHEX60gensym65802_66003, "IndexError");

  
}

function to_toc_198703(x_198705, father_198706) {
                var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
      var Tmp15;

  var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if ((x_198705.nodeName == "UL")) {
    F.line = 139;
    var f_198727 = {heading: null, kids: [], sortId: (father_198706.kids != null ? father_198706.kids.length : 0), doSort: false};
    F.line = 140;
    var i_198729 = 0;
    L1: do {
      F.line = 141;
        L2: while (true) {
        if (!(i_198729 < x_198705.childNodes.length)) break L2;
          F.line = 142;
          var nxt_198730 = addInt(i_198729, 1);
          L3: do {
            F.line = 143;
              L4: while (true) {
                if (!(nxt_198730 < x_198705.childNodes.length)) Tmp5 = false; else {                  Tmp5 = is_whitespace_198686(x_198705.childNodes[nxt_198730]);                }              if (!Tmp5) break L4;
                F.line = 144;
                nxt_198730 = addInt(nxt_198730, 1);
              }
          } while(false);
            if (!(nxt_198730 < x_198705.childNodes.length)) Tmp8 = false; else {              Tmp8 = (x_198705.childNodes[i_198729].nodeName == "LI");            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (x_198705.childNodes[i_198729].childNodes.length == 1);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (x_198705.childNodes[nxt_198730].nodeName == "UL");            }          if (Tmp6) {
          F.line = 147;
          var e_198757 = {heading: x_198705.childNodes[i_198729].childNodes[0], kids: [], sortId: (f_198727.kids != null ? f_198727.kids.length : 0), doSort: false};
          F.line = 148;
          var it_198758 = x_198705.childNodes[nxt_198730];
          L9: do {
            F.line = 149;
            var j_198766 = 0;
            F.line = 2732;
            var colontmp__199442 = 0;
            F.line = 149;
            colontmp__199442 = it_198758.childNodes.length;
            F.line = 2734;
            var i_199443 = 0;
            L10: do {
              F.line = 2735;
                L11: while (true) {
                if (!(i_199443 < colontmp__199442)) break L11;
                  F.line = 149;
                  j_198766 = i_199443;
                  F.line = 150;
                  to_toc_198703(it_198758.childNodes[j_198766], e_198757);
                  F.line = 2737;
                  i_199443 = addInt(i_199443, 1);
                }
            } while(false);
          } while(false);
          F.line = 151;
          if (f_198727.kids != null) { f_198727.kids.push(e_198757); } else { f_198727.kids = [e_198757]; };
          F.line = 152;
          i_198729 = addInt(nxt_198730, 1);
          }
          else {
            F.line = 154;
            to_toc_198703(x_198705.childNodes[i_198729], f_198727);
            F.line = 155;
            i_198729 = addInt(i_198729, 1);
          }
          
        }
    } while(false);
    F.line = 156;
    if (father_198706.kids != null) { father_198706.kids.push(f_198727); } else { father_198706.kids = [f_198727]; };
    }
    else {
    if (is_whitespace_198686(x_198705)) {
    }
    else {
    if ((x_198705.nodeName == "LI")) {
    F.line = 160;
    var idx_198803 = [];
    L12: do {
      F.line = 161;
      var i_198811 = 0;
      F.line = 2732;
      var colontmp__199446 = 0;
      F.line = 161;
      colontmp__199446 = x_198705.childNodes.length;
      F.line = 2734;
      var i_199447 = 0;
      L13: do {
        F.line = 2735;
          L14: while (true) {
          if (!(i_199447 < colontmp__199446)) break L14;
            F.line = 161;
            i_198811 = i_199447;
            if (!(is_whitespace_198686(x_198705.childNodes[i_198811]))) {
            F.line = 162;
            if (idx_198803 != null) { idx_198803.push(i_198811); } else { idx_198803 = [i_198811]; };
            }
            
            F.line = 2737;
            i_199447 = addInt(i_199447, 1);
          }
      } while(false);
    } while(false);
      if (!((idx_198803 != null ? idx_198803.length : 0) == 2)) Tmp15 = false; else {        Tmp15 = (x_198705.childNodes[idx_198803[chckIndx(1, 0, (idx_198803 != null ? idx_198803.length : 0)+0-1)-0]].nodeName == "UL");      }    if (Tmp15) {
    F.line = 164;
    var e_198844 = {heading: x_198705.childNodes[idx_198803[chckIndx(0, 0, (idx_198803 != null ? idx_198803.length : 0)+0-1)-0]], kids: [], sortId: (father_198706.kids != null ? father_198706.kids.length : 0), doSort: false};
    F.line = 166;
    var it_198845 = x_198705.childNodes[idx_198803[chckIndx(1, 0, (idx_198803 != null ? idx_198803.length : 0)+0-1)-0]];
    L16: do {
      F.line = 167;
      var j_198853 = 0;
      F.line = 2732;
      var colontmp__199451 = 0;
      F.line = 167;
      colontmp__199451 = it_198845.childNodes.length;
      F.line = 2734;
      var i_199452 = 0;
      L17: do {
        F.line = 2735;
          L18: while (true) {
          if (!(i_199452 < colontmp__199451)) break L18;
            F.line = 167;
            j_198853 = i_199452;
            F.line = 168;
            to_toc_198703(it_198845.childNodes[j_198853], e_198844);
            F.line = 2737;
            i_199452 = addInt(i_199452, 1);
          }
      } while(false);
    } while(false);
    F.line = 169;
    if (father_198706.kids != null) { father_198706.kids.push(e_198844); } else { father_198706.kids = [e_198844]; };
    }
    else {
      L19: do {
        F.line = 171;
        var i_198868 = 0;
        F.line = 2732;
        var colontmp__199455 = 0;
        F.line = 171;
        colontmp__199455 = x_198705.childNodes.length;
        F.line = 2734;
        var i_199456 = 0;
        L20: do {
          F.line = 2735;
            L21: while (true) {
            if (!(i_199456 < colontmp__199455)) break L21;
              F.line = 171;
              i_198868 = i_199456;
              F.line = 172;
              to_toc_198703(x_198705.childNodes[i_198868], father_198706);
              F.line = 2737;
              i_199456 = addInt(i_199456, 1);
            }
        } while(false);
      } while(false);
    }
    
    }
    else {
      F.line = 174;
    if (father_198706.kids != null) { father_198706.kids.push({heading: x_198705, kids: [], sortId: (father_198706.kids != null ? father_198706.kids.length : 0), doSort: false}); } else { father_198706.kids = [{heading: x_198705, kids: [], sortId: (father_198706.kids != null ? father_198706.kids.length : 0), doSort: false}]; };
    }
    }}
  framePtr = F.prev;

  
}

function extract_items_198339(x_198341, heading_198342, items_198345, items_198345_Idx) {
      var Tmp1;

  var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((x_198341 == null)) {
    F.line = 81;
    break BeforeRet;
    }
    
      if (!!((x_198341.heading == null))) Tmp1 = false; else {        Tmp1 = (x_198341.heading.textContent == heading_198342);      }    if (Tmp1) {
    L2: do {
      F.line = 83;
      var i_198374 = 0;
      F.line = 2732;
      var colontmp__199483 = 0;
      F.line = 83;
      colontmp__199483 = (x_198341.kids != null ? x_198341.kids.length : 0);
      F.line = 2734;
      var i_199484 = 0;
      L3: do {
        F.line = 2735;
          L4: while (true) {
          if (!(i_199484 < colontmp__199483)) break L4;
            F.line = 83;
            i_198374 = i_199484;
            F.line = 84;
            if (items_198345[items_198345_Idx] != null) { items_198345[items_198345_Idx].push(x_198341.kids[chckIndx(i_198374, 0, (x_198341.kids != null ? x_198341.kids.length : 0)+0-1)-0].heading); } else { items_198345[items_198345_Idx] = [x_198341.kids[chckIndx(i_198374, 0, (x_198341.kids != null ? x_198341.kids.length : 0)+0-1)-0].heading]; };
            F.line = 2737;
            i_199484 = addInt(i_199484, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      L5: do {
        F.line = 86;
        var i_198394 = 0;
        F.line = 2732;
        var colontmp__199487 = 0;
        F.line = 86;
        colontmp__199487 = (x_198341.kids != null ? x_198341.kids.length : 0);
        F.line = 2734;
        var i_199488 = 0;
        L6: do {
          F.line = 2735;
            L7: while (true) {
            if (!(i_199488 < colontmp__199487)) break L7;
              F.line = 86;
              i_198394 = i_199488;
              F.line = 87;
              var it_198395 = x_198341.kids[chckIndx(i_198394, 0, (x_198341.kids != null ? x_198341.kids.length : 0)+0-1)-0];
              F.line = 88;
              extract_items_198339(it_198395, heading_198342, items_198345, items_198345_Idx);
              F.line = 2737;
              i_199488 = addInt(i_199488, 1);
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}

function tree_198020(tag_198022, kids_198024) {
  var result_198025 = null;

  var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 11;
    result_198025 = document.createElement(toJSStr(tag_198022));
    L1: do {
      F.line = 12;
      var k_198056 = null;
      F.line = 3;
      var i_199504 = 0;
      L2: do {
        F.line = 4;
          L3: while (true) {
          if (!(i_199504 < (kids_198024 != null ? kids_198024.length : 0))) break L3;
            F.line = 12;
            k_198056 = kids_198024[chckIndx(i_199504, 0, (kids_198024 != null ? kids_198024.length : 0)+0-1)-0];
            F.line = 13;
            result_198025.appendChild(k_198056);
            F.line = 6;
            i_199504 = addInt(i_199504, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_198025;

}

function text_198152(s_198154) {
  var result_198155 = null;

  var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_198155 = document.createTextNode(s_198154);
  framePtr = F.prev;

  return result_198155;

}

function sys_fatal_57862(message_57866) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 50;
    var e_58003 = null;
    F.line = 53;
    e_58003 = {m_type: NTI47250, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    F.line = 54;
    e_58003.message = nimCopy(null, message_57866, NTI44040);
    F.line = 55;
    raiseException(e_58003, "AssertionError");
  framePtr = F.prev;

  
}

function raise_assert_57858(msg_57860) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 20;
    sys_fatal_57862(msg_57860);
  framePtr = F.prev;

  
}

function failed_assert_impl_58066(msg_58068) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 27;
    raise_assert_57858(msg_58068);
  framePtr = F.prev;

  
}

function uncovered_198995(x_198997) {
      var Tmp1;
    var Tmp2;

  var result_198998 = null;

  var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!((x_198997.kids != null ? x_198997.kids.length : 0) == 0)) Tmp1 = false; else {        Tmp1 = !((x_198997.heading == null));      }    if (Tmp1) {
    F.line = 194;
    if (!(x_198997.heading.hasOwnProperty('__karaxMarker__'))) {
    Tmp2 = x_198997;
    }
    else {
    Tmp2 = null;
    }
    
    result_198998 = Tmp2;
    break BeforeRet;
    }
    
    F.line = 195;
    result_198998 = {heading: x_198997.heading, kids: [], sortId: x_198997.sortId, doSort: x_198997.doSort};
    L3: do {
      F.line = 197;
      var i_199039 = 0;
      F.line = 2732;
      var colontmp__199515 = 0;
      F.line = 197;
      colontmp__199515 = (x_198997.kids != null ? x_198997.kids.length : 0);
      F.line = 2734;
      var i_199516 = 0;
      L4: do {
        F.line = 2735;
          L5: while (true) {
          if (!(i_199516 < colontmp__199515)) break L5;
            F.line = 197;
            i_199039 = i_199516;
            F.line = 198;
            var y_199040 = uncovered_198995(x_198997.kids[chckIndx(i_199039, 0, (x_198997.kids != null ? x_198997.kids.length : 0)+0-1)-0]);
            if (!((y_199040 == null))) {
            F.line = 199;
            if (result_198998.kids != null) { result_198998.kids.push(y_199040); } else { result_198998.kids = [y_199040]; };
            }
            
            F.line = 2737;
            i_199516 = addInt(i_199516, 1);
          }
      } while(false);
    } while(false);
    if (((result_198998.kids != null ? result_198998.kids.length : 0) == 0)) {
    F.line = 200;
    result_198998 = null;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_198998;

}

function merge_tocs_199074(orig_199076, news_199077) {
  var result_199078 = null;

  var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 203;
    result_199078 = uncovered_198995(orig_199076);
    if ((result_199078 == null)) {
    F.line = 205;
    result_199078 = news_199077;
    }
    else {
      L1: do {
        F.line = 207;
        var i_199099 = 0;
        F.line = 2732;
        var colontmp__199510 = 0;
        F.line = 207;
        colontmp__199510 = (news_199077.kids != null ? news_199077.kids.length : 0);
        F.line = 2734;
        var i_199511 = 0;
        L2: do {
          F.line = 2735;
            L3: while (true) {
            if (!(i_199511 < colontmp__199510)) break L3;
              F.line = 207;
              i_199099 = i_199511;
              F.line = 208;
              if (result_199078.kids != null) { result_199078.kids.push(news_199077.kids[chckIndx(i_199099, 0, (news_199077.kids != null ? news_199077.kids.length : 0)+0-1)-0]); } else { result_199078.kids = [news_199077.kids[chckIndx(i_199099, 0, (news_199077.kids != null ? news_199077.kids.length : 0)+0-1)-0]]; };
              F.line = 2737;
              i_199511 = addInt(i_199511, 1);
            }
        } while(false);
      } while(false);
    }
    
  framePtr = F.prev;

  return result_199078;

}

function build_toc_199120(orig_199122, types_199124, procs_199125) {
  var result_199126 = null;

  var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 211;
    var new_stuff_199142 = {heading: null, kids: [], doSort: true, sortId: 0};
    L1: do {
      F.line = 212;
      var t_199214 = null;
      F.line = 184;
      var i_199499 = 0;
      F.line = 185;
      var l_199500 = (types_199124 != null ? types_199124.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_199499 < l_199500)) break L3;
            F.line = 212;
            t_199214 = types_199124[chckIndx(i_199499, 0, (types_199124 != null ? types_199124.length : 0)+0-1)-0];
            F.line = 213;
            var c_199230 = {heading: t_199214.cloneNode(true), kids: [], doSort: true, sortId: 0};
            F.line = 214;
            t_199214.__karaxMarker__ = true;
            L4: do {
              F.line = 215;
              var p_199237 = null;
              F.line = 184;
              var i_199496 = 0;
              F.line = 185;
              var l_199497 = (procs_199125 != null ? procs_199125.length : 0);
              L5: do {
                F.line = 186;
                  L6: while (true) {
                  if (!(i_199496 < l_199497)) break L6;
                    F.line = 215;
                    p_199237 = procs_199125[chckIndx(i_199496, 0, (procs_199125 != null ? procs_199125.length : 0)+0-1)-0];
                    if (!(p_199237.hasOwnProperty('__karaxMarker__'))) {
                    F.line = 217;
                    var xx_199238 = p_199237.parentNode.getElementsByClassName("attachedType");
                    if ((((xx_199238 != null ? xx_199238.length : 0) == 1) && (xx_199238[chckIndx(0, 0, (xx_199238 != null ? xx_199238.length : 0)+0-1)-0].textContent == t_199214.textContent))) {
                    F.line = 220;
                    var q_199246 = tree_198020(makeNimstrLit("A"), [text_198152(p_199237.title)]);
                    F.line = 221;
                    q_199246.setAttribute("href", p_199237.getAttribute("href"));
                    F.line = 222;
                    if (c_199230.kids != null) { c_199230.kids.push({heading: q_199246, kids: [], sortId: 0, doSort: false}); } else { c_199230.kids = [{heading: q_199246, kids: [], sortId: 0, doSort: false}]; };
                    F.line = 223;
                    p_199237.__karaxMarker__ = true;
                    }
                    
                    }
                    
                    F.line = 188;
                    i_199496 = addInt(i_199496, 1);
                    if (!(((procs_199125 != null ? procs_199125.length : 0) == l_199497))) {
                    F.line = 189;
                    failed_assert_impl_58066(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
            F.line = 224;
            if (new_stuff_199142.kids != null) { new_stuff_199142.kids.push(c_199230); } else { new_stuff_199142.kids = [c_199230]; };
            F.line = 188;
            i_199499 = addInt(i_199499, 1);
            if (!(((types_199124 != null ? types_199124.length : 0) == l_199500))) {
            F.line = 189;
            failed_assert_impl_58066(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 225;
    result_199126 = merge_tocs_199074(orig_199122, new_stuff_199142);
  framePtr = F.prev;

  return result_199126;

}

function add_198085(parent_198087, kid_198088) {
      var Tmp1;
        var Tmp2;

  var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
      if (!(parent_198087.nodeName == "TR")) Tmp1 = false; else {        if ((kid_198088.nodeName == "TD")) Tmp2 = true; else {          Tmp2 = (kid_198088.nodeName == "TH");        }        Tmp1 = Tmp2;      }    if (Tmp1) {
    F.line = 18;
    var k_198089 = document.createElement("TD");
    F.line = 19;
    k_198089.appendChild(kid_198088);
    F.line = 20;
    parent_198087.appendChild(k_198089);
    }
    else {
      F.line = 22;
    parent_198087.appendChild(kid_198088);
    }
    
  framePtr = F.prev;

  
}

function set_class_198103(e_198105, value_198106) {
  var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 25;
    e_198105.setAttribute("class", toJSStr(value_198106));
  framePtr = F.prev;

  
}

function to_html_198424(x_198426, is_root_198427) {
      var Tmp1;

    function HEX3Aanonymous_198467(a_198469, b_198470) {
          var Tmp1;

      var result_198471 = 0;

      var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
      BeforeRet: do {
          if (!!((a_198469.heading == null))) Tmp1 = false; else {            Tmp1 = !((b_198470.heading == null));          }        if (Tmp1) {
        F.line = 106;
        var x_198488 = a_198469.heading.textContent;
        F.line = 107;
        var y_198489 = b_198470.heading.textContent;
        if ((x_198488 < y_198489)) {
        F.line = 108;
        result_198471 = -1;
        break BeforeRet;
        }
        
        if ((y_198489 < x_198488)) {
        F.line = 109;
        result_198471 = 1;
        break BeforeRet;
        }
        
        F.line = 110;
        result_198471 = 0;
        break BeforeRet;
        }
        else {
          F.line = 113;
          result_198471 = subInt(a_198469.sortId, b_198470.sortId);
          break BeforeRet;
        }
        
      } while (false);
      framePtr = F.prev;

      return result_198471;

    }

  var result_198428 = null;

  var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((x_198426 == null)) {
    F.line = 91;
    result_198428 = null;
    break BeforeRet;
    }
    
    if (((x_198426.kids != null ? x_198426.kids.length : 0) == 0)) {
    if ((x_198426.heading == null)) {
    F.line = 93;
    result_198428 = null;
    break BeforeRet;
    }
    
    F.line = 94;
    result_198428 = x_198426.heading.cloneNode(true);
    break BeforeRet;
    }
    
    F.line = 95;
    result_198428 = tree_198020(makeNimstrLit("DIV"), []);
      if (!!((x_198426.heading == null))) Tmp1 = false; else {        Tmp1 = !(x_198426.heading.hasOwnProperty('__karaxMarker__'));      }    if (Tmp1) {
    F.line = 97;
    add_198085(result_198428, x_198426.heading.cloneNode(true));
    }
    
    F.line = 98;
    var ul_198464 = tree_198020(makeNimstrLit("UL"), []);
    if (is_root_198427) {
    F.line = 100;
    set_class_198103(ul_198464, makeNimstrLit("simple simple-toc"));
    }
    else {
      F.line = 102;
    set_class_198103(ul_198464, makeNimstrLit("simple"));
    }
    
    if (x_198426.doSort) {
    F.line = 104;
    x_198426.kids.sort(HEX3Aanonymous_198467);
    }
    
    L2: do {
      F.line = 115;
      var k_198614 = null;
      F.line = 182;
      var colontmp__199521 = null;
      F.line = 115;
      colontmp__199521 = x_198426.kids;
      F.line = 184;
      var i_199523 = 0;
      F.line = 185;
      var l_199524 = (colontmp__199521 != null ? colontmp__199521.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_199523 < l_199524)) break L4;
            F.line = 115;
            k_198614 = colontmp__199521[chckIndx(i_199523, 0, (colontmp__199521 != null ? colontmp__199521.length : 0)+0-1)-0];
            F.line = 116;
            var y_198615 = to_html_198424(k_198614, false);
            if (!((y_198615 == null))) {
            F.line = 118;
            add_198085(ul_198464, tree_198020(makeNimstrLit("LI"), [y_198615]));
            }
            
            F.line = 188;
            i_199523 = addInt(i_199523, 1);
            if (!(((colontmp__199521 != null ? colontmp__199521.length : 0) == l_199524))) {
            F.line = 189;
            failed_assert_impl_58066(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    if (!((ul_198464.childNodes.length == 0))) {
    F.line = 119;
    add_198085(result_198428, ul_198464);
    }
    
    if ((result_198428.childNodes.length == 0)) {
    F.line = 120;
    result_198428 = null;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_198428;

}

function replace_by_id_198172(id_198174, new_tree_198175) {
  var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 32;
    var x_198176 = document.getElementById(id_198174);
    F.line = 33;
    x_198176.parentNode.replaceChild(new_tree_198175, x_198176);
    F.line = 34;
    new_tree_198175.id = id_198174;
  framePtr = F.prev;

  
}

function togglevis_199333(d_199335) {
  var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 230;
        if (d_199335.style.display == 'none')
      d_199335.style.display = 'inline';
    else
      d_199335.style.display = 'none';
  
  framePtr = F.prev;

  
}

function groupBy(value_199351) {
  var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 238;
    var toc_199352 = document.getElementById("toc-list");
    if ((alternative_199319[0] == null)) {
    F.line = 240;
    var tt_199373 = {heading: null, kids: [], sortId: 0, doSort: false};
    F.line = 241;
    to_toc_198703(toc_199352, tt_199373);
    F.line = 242;
    tt_199373 = tt_199373.kids[chckIndx(0, 0, (tt_199373.kids != null ? tt_199373.kids.length : 0)+0-1)-0];
    F.line = 244;
    var types_199390 = [[]];
    F.line = 245;
    var procs_199407 = [[]];
    F.line = 247;
    extract_items_198339(tt_199373, "Types", types_199390, 0);
    F.line = 248;
    extract_items_198339(tt_199373, "Procs", procs_199407, 0);
    F.line = 249;
    extract_items_198339(tt_199373, "Converters", procs_199407, 0);
    F.line = 250;
    extract_items_198339(tt_199373, "Methods", procs_199407, 0);
    F.line = 251;
    extract_items_198339(tt_199373, "Templates", procs_199407, 0);
    F.line = 252;
    extract_items_198339(tt_199373, "Macros", procs_199407, 0);
    F.line = 253;
    extract_items_198339(tt_199373, "Iterators", procs_199407, 0);
    F.line = 255;
    var ntoc_199415 = build_toc_199120(tt_199373, types_199390[0], procs_199407[0]);
    F.line = 256;
    var x_199416 = to_html_198424(ntoc_199415, true);
    F.line = 257;
    alternative_199319[0] = tree_198020(makeNimstrLit("DIV"), [x_199416]);
    }
    
    if ((value_199351 == "type")) {
    F.line = 259;
    replace_by_id_198172("tocRoot", alternative_199319[0]);
    }
    else {
      F.line = 261;
    replace_by_id_198172("tocRoot", tree_198020(makeNimstrLit("DIV"), []));
    }
    
    F.line = 262;
    togglevis_199333(document.getElementById("toc-list"));
  framePtr = F.prev;

  
}
var db_199527 = [null];
var contents_199529 = [null];
var oldtoc_199961 = [null];
var timer_199962 = [null];

function raiseRangeError() {
    var eHEX60gensym65457_65603 = null;
    eHEX60gensym65457_65603 = {m_type: NTI47262, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym65457_65603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI44040);
    eHEX60gensym65457_65603.parent = null;
    raiseException(eHEX60gensym65457_65603, "RangeError");

  
}

function nsuToLowerAsciiChar(c_187184) {
  var result_187185 = 0;

  var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((ConstSet2[c_187184] != undefined)) {
    F.line = 209;
    result_187185 = chckRange(addInt(c_187184, 32), 0, 255);
    }
    else {
      F.line = 211;
      result_187185 = c_187184;
    }
    
  framePtr = F.prev;

  return result_187185;

}

function fuzzy_match_197054(pattern_197056, str_197057) {
              var Tmp4;
              var Tmp5;
                var Tmp6;

  var result_197061 = {Field0: 0, Field1: false};

  var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
  framePtr = F;
    F.line = 36;
    var score_state_197062 = -100;
    F.line = 37;
    var header_matched_197063 = false;
    F.line = 38;
    var unmatched_leading_char_count_197065 = 0;
    F.line = 39;
    var consecutive_match_count_197067 = 0;
    F.line = 40;
    var str_index_197069 = 0;
    F.line = 41;
    var pat_index_197071 = 0;
    F.line = 42;
    var score_197073 = 0;
    L1: do {
      F.line = 48;
        L2: while (true) {
        if (!((str_index_197069 < (str_197057 != null ? str_197057.length : 0)) && (pat_index_197071 < (pattern_197056 != null ? pattern_197056.length : 0)))) break L2;
          L3: do {
            F.line = 50;
            var pattern_char_197079 = nsuToLowerAsciiChar(pattern_197056.charCodeAt(chckIndx(pat_index_197071, 0, (pattern_197056 != null ? pattern_197056.length : 0)+0-1)-0));
            F.line = 51;
            var str_char_197080 = nsuToLowerAsciiChar(str_197057.charCodeAt(chckIndx(str_index_197069, 0, (str_197057 != null ? str_197057.length : 0)+0-1)-0));
            if ((ConstSet3[pattern_char_197079] != undefined)) {
            F.line = 55;
            pat_index_197071 = addInt(pat_index_197071, 1);
            F.line = 56;
            break L3;
            }
            
            if ((ConstSet4[str_char_197080] != undefined)) {
            F.line = 58;
            str_index_197069 = addInt(str_index_197069, 1);
            F.line = 59;
            break L3;
            }
            
            if ((!(header_matched_197063) && (str_char_197080 == 58))) {
            F.line = 64;
            header_matched_197063 = true;
            F.line = 65;
            score_state_197062 = -100;
            F.line = 66;
            score_197073 = ((Math.floor((5.0000000000000000e-01 * score_197073)))|0);
            F.line = 67;
            pat_index_197071 = 0;
            F.line = 68;
            str_index_197069 = addInt(str_index_197069, 1);
            F.line = 69;
            break L3;
            }
            
            if ((str_char_197080 == pattern_char_197079)) {
            F.line = 72;
            switch (score_state_197062) {
            case -100:
            case 20:
              F.line = 74;
              score_state_197062 = 10;
              break;
            case 0:
              F.line = 77;
              score_state_197062 = 5;
              F.line = 77;
              score_197073 = addInt(score_197073, score_state_197062);
              break;
            case 10:
            case 5:
              F.line = 80;
              consecutive_match_count_197067 = addInt(consecutive_match_count_197067, 1);
              F.line = 81;
              score_state_197062 = 5;
              F.line = 82;
              score_197073 = addInt(score_197073, mulInt(5, consecutive_match_count_197067));
              if ((score_state_197062 == 10)) {
              F.line = 85;
              score_197073 = addInt(score_197073, 10);
              }
              
              F.line = 87;
              var on_boundary_197154 = (pat_index_197071 == (pattern_197056 != null ? (pattern_197056.length-1) : -1));
              if ((!(on_boundary_197154) && (str_index_197069 < (str_197057 != null ? (str_197057.length-1) : -1)))) {
              F.line = 90;
              var next_pattern_char_197155 = nsuToLowerAsciiChar(pattern_197056.charCodeAt(chckIndx(addInt(pat_index_197071, 1), 0, (pattern_197056 != null ? pattern_197056.length : 0)+0-1)-0));
              F.line = 91;
              var next_str_char_197156 = nsuToLowerAsciiChar(str_197057.charCodeAt(chckIndx(addInt(str_index_197069, 1), 0, (str_197057 != null ? str_197057.length : 0)+0-1)-0));
              F.line = 94;
              if (!!((ConstSet5[next_str_char_197156] != undefined))) Tmp4 = false; else {                Tmp4 = !((next_str_char_197156 == next_pattern_char_197155));              }              on_boundary_197154 = Tmp4;
              }
              
              if (on_boundary_197154) {
              F.line = 99;
              score_state_197062 = 20;
              F.line = 99;
              score_197073 = addInt(score_197073, score_state_197062);
              }
              
              break;
            case -1:
            case -3:
              F.line = 102;
              if (!((ConstSet6[str_197057.charCodeAt(chckIndx(subInt(str_index_197069, 1), 0, (str_197057 != null ? str_197057.length : 0)+0-1)-0)] != undefined))) Tmp5 = true; else {                if (!(ConstSet7[str_197057.charCodeAt(chckIndx(subInt(str_index_197069, 1), 0, (str_197057 != null ? str_197057.length : 0)+0-1)-0)] != undefined)) Tmp6 = false; else {                  Tmp6 = (ConstSet8[str_197057.charCodeAt(chckIndx(str_index_197069, 0, (str_197057 != null ? str_197057.length : 0)+0-1)-0)] != undefined);                }                Tmp5 = Tmp6;              }              var is_leading_char_197194 = Tmp5;
              if (is_leading_char_197194) {
              F.line = 109;
              score_state_197062 = 10;
              }
              else {
                F.line = 113;
                score_state_197062 = 0;
                F.line = 113;
                score_197073 = addInt(score_197073, score_state_197062);
              }
              
              break;
            }
            F.line = 114;
            pat_index_197071 = addInt(pat_index_197071, 1);
            }
            else {
              F.line = 117;
              switch (score_state_197062) {
              case -100:
                F.line = 119;
                score_state_197062 = -3;
                F.line = 119;
                score_197073 = addInt(score_197073, score_state_197062);
                break;
              case 5:
                F.line = 122;
                score_state_197062 = -1;
                F.line = 122;
                score_197073 = addInt(score_197073, score_state_197062);
                F.line = 123;
                consecutive_match_count_197067 = 0;
                break;
              case -3:
                if ((unmatched_leading_char_count_197065 < 3)) {
                F.line = 127;
                score_state_197062 = -3;
                F.line = 127;
                score_197073 = addInt(score_197073, score_state_197062);
                }
                
                F.line = 128;
                unmatched_leading_char_count_197065 = addInt(unmatched_leading_char_count_197065, 1);
                break;
              default: 
                F.line = 131;
                score_state_197062 = -1;
                F.line = 131;
                score_197073 = addInt(score_197073, score_state_197062);
                break;
              }
            }
            
            F.line = 133;
            str_index_197069 = addInt(str_index_197069, 1);
          } while(false);
        }
    } while(false);
    F.line = 136;
    var colontmp__200065 = nimMax(0, score_197073);
    F.line = 137;
    var colontmp__200066 = (0 < score_197073);
    F.line = 135;
    nimCopy(result_197061, {Field0: colontmp__200065, Field1: colontmp__200066}, NTI197058);
  framePtr = F.prev;

  return result_197061;

}

function text_198120(s_198122) {
  var result_198123 = null;

  var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    F.line = 26;
    result_198123 = document.createTextNode(toJSStr(s_198122));
  framePtr = F.prev;

  return result_198123;

}

function dosearch_199546(value_199548) {

    function HEX3Aanonymous_199873(a_199882, b_199883) {
      var result_199887 = 0;

      var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
        F.line = 305;
        result_199887 = subInt(b_199883["Field1"], a_199882["Field1"]);
      framePtr = F.prev;

      return result_199887;

    }

  var result_199549 = null;

  var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if (((db_199527[0] != null ? db_199527[0].length : 0) == 0)) {
    F.line = 272;
    var stuff_199555 = null;
    F.line = 273;
        var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_199555 = doc.documentElement;
    
    F.line = 286;
    db_199527[0] = nimCopy(null, stuff_199555.getElementsByClassName("reference"), NTI87305);
    F.line = 287;
    contents_199529[0] = nimCopy(null, [], NTI199570);
    L1: do {
      F.line = 288;
      var ahref_199814 = null;
      F.line = 184;
      var i_200045 = 0;
      F.line = 185;
      var l_200046 = (db_199527[0] != null ? db_199527[0].length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_200045 < l_200046)) break L3;
            F.line = 288;
            ahref_199814 = db_199527[0][chckIndx(i_200045, 0, (db_199527[0] != null ? db_199527[0].length : 0)+0-1)-0];
            F.line = 289;
            if (contents_199529[0] != null) { contents_199529[0].push(ahref_199814.getAttribute("data-doc-search-tag")); } else { contents_199529[0] = [ahref_199814.getAttribute("data-doc-search-tag")]; };
            F.line = 188;
            i_200045 = addInt(i_200045, 1);
            if (!(((db_199527[0] != null ? db_199527[0].length : 0) == l_200046))) {
            F.line = 189;
            failed_assert_impl_58066(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    F.line = 290;
    var ul_199825 = tree_198020(makeNimstrLit("UL"), []);
    F.line = 291;
    result_199549 = tree_198020(makeNimstrLit("DIV"), []);
    F.line = 292;
    set_class_198103(result_199549, makeNimstrLit("search_results"));
    F.line = 293;
    var matches_199846 = [];
    L4: do {
      F.line = 294;
      var i_199859 = 0;
      F.line = 2732;
      var colontmp__200052 = 0;
      F.line = 294;
      colontmp__200052 = (db_199527[0] != null ? db_199527[0].length : 0);
      F.line = 2734;
      var i_200053 = 0;
      L5: do {
        F.line = 2735;
          L6: while (true) {
          if (!(i_200053 < colontmp__200052)) break L6;
            F.line = 294;
            i_199859 = i_200053;
            L7: do {
              F.line = 295;
              var c_199860 = contents_199529[0][chckIndx(i_199859, 0, (contents_199529[0] != null ? contents_199529[0].length : 0)+0-1)-0];
              if (((c_199860 == "Examples") || (c_199860 == "PEG construction"))) {
              F.line = 300;
              break L7;
              }
              
              F.line = 301;
              var colontmp__200060 = {Field0: 0, Field1: false};
              F.line = 301;
              var score_199861 = 0;
              F.line = 301;
              var matched_199862 = false;
              F.line = 301;
              nimCopy(colontmp__200060, fuzzy_match_197054(value_199548, c_199860), NTI197058);
              F.line = 301;
              score_199861 = colontmp__200060["Field0"];
              F.line = 301;
              matched_199862 = colontmp__200060["Field1"];
              if (matched_199862) {
              F.line = 303;
              if (matches_199846 != null) { matches_199846.push({Field0: db_199527[0][chckIndx(i_199859, 0, (db_199527[0] != null ? db_199527[0].length : 0)+0-1)-0], Field1: score_199861}); } else { matches_199846 = [{Field0: db_199527[0][chckIndx(i_199859, 0, (db_199527[0] != null ? db_199527[0].length : 0)+0-1)-0], Field1: score_199861}]; };
              }
              
            } while(false);
            F.line = 2737;
            i_200053 = addInt(i_200053, 1);
          }
      } while(false);
    } while(false);
    F.line = 305;
    matches_199846.sort(HEX3Aanonymous_199873);
    L8: do {
      F.line = 306;
      var i_199926 = 0;
      F.line = 2732;
      var colontmp__200057 = 0;
      F.line = 306;
      colontmp__200057 = nimMin((matches_199846 != null ? matches_199846.length : 0), 19);
      F.line = 2734;
      var i_200058 = 0;
      L9: do {
        F.line = 2735;
          L10: while (true) {
          if (!(i_200058 < colontmp__200057)) break L10;
            F.line = 306;
            i_199926 = i_200058;
            F.line = 307;
            matches_199846[chckIndx(i_199926, 0, (matches_199846 != null ? matches_199846.length : 0)+0-1)-0]["Field0"].innerHTML = matches_199846[chckIndx(i_199926, 0, (matches_199846 != null ? matches_199846.length : 0)+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
            F.line = 308;
            add_198085(ul_199825, tree_198020(makeNimstrLit("LI"), [matches_199846[chckIndx(i_199926, 0, (matches_199846 != null ? matches_199846.length : 0)+0-1)-0]["Field0"]]));
            F.line = 2737;
            i_200058 = addInt(i_200058, 1);
          }
      } while(false);
    } while(false);
    if ((ul_199825.childNodes.length == 0)) {
    F.line = 310;
    add_198085(result_199549, tree_198020(makeNimstrLit("B"), [text_198120(makeNimstrLit("no search results"))]));
    }
    else {
      F.line = 312;
      add_198085(result_199549, tree_198020(makeNimstrLit("B"), [text_198120(makeNimstrLit("search results"))]));
      F.line = 313;
      add_198085(result_199549, ul_199825);
    }
    
  framePtr = F.prev;

  return result_199549;

}

function search() {

    function wrapper_199993() {
      var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
      framePtr = F;
        F.line = 320;
        var elem_199995 = document.getElementById("searchInput");
        F.line = 321;
        var value_199996 = elem_199995.value;
        if (!(((value_199996 != null ? value_199996.length : 0) == 0))) {
        if ((oldtoc_199961[0] == null)) {
        F.line = 324;
        oldtoc_199961[0] = document.getElementById("tocRoot");
        }
        
        F.line = 325;
        var results_200002 = dosearch_199546(value_199996);
        F.line = 326;
        replace_by_id_198172("tocRoot", results_200002);
        }
        else {
        if (!((oldtoc_199961[0] == null))) {
        F.line = 328;
        replace_by_id_198172("tocRoot", oldtoc_199961[0]);
        }
        }
      framePtr = F.prev;

      
    }

  var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
  framePtr = F;
    if (!((timer_199962[0] == null))) {
    F.line = 330;
    clearTimeout(timer_199962[0]);
    }
    
    F.line = 331;
    timer_199962[0] = setTimeout(wrapper_199993, 400);
  framePtr = F.prev;

  
}
